{"version":3,"sources":["output.ts"],"names":[],"mappings":"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","file":"output.js","sourcesContent":["import * as path from \"path\";\nimport * as sourceMap from \"source-map\";\nimport * as stream from \"stream\";\nimport * as ts from \"typescript\";\nimport * as VinylFile from \"vinyl\";\nimport * as input from \"./input\";\nimport * as project from \"./project\";\nimport * as reporter from \"./reporter\";\nimport * as utils from \"./utils\";\n\nexport class Output {\n    constructor(\n        _project: project.ProjectInfo,\n        streamFull: stream.Readable,\n        streamJs: stream.Readable,\n        streamDts: stream.Readable,\n    ) {\n        this.project = _project;\n        this.streamFull = streamFull;\n        this.streamJs = streamJs;\n        this.streamDts = streamDts;\n    }\n\n    project: project.ProjectInfo;\n\n    result: reporter.CompilationResult;\n\n    // .js and .d.ts files\n    streamFull: stream.Readable;\n\n    // .js files\n    streamJs: stream.Readable;\n\n    // .d.ts files\n    streamDts: stream.Readable;\n\n    writeJs(\n        base: string,\n        fileName: string,\n        content: string,\n        sourceMapContent: string,\n        cwd: string,\n        original: input.File,\n    ) {\n        const file = new VinylFile({\n            path: fileName,\n            contents: new Buffer(content),\n            cwd,\n            base,\n        });\n        const appliedSourceMap = this.applySourceMap(sourceMapContent, original, file);\n        if (appliedSourceMap) {\n            file.sourceMap = JSON.parse(appliedSourceMap);\n        }\n        this.streamFull.push(file);\n        this.streamJs.push(file);\n    }\n\n    writeDts(base: string, fileName: string, content: string, cwd: string) {\n        const file = new VinylFile({\n            path: fileName,\n            contents: new Buffer(content),\n            cwd,\n            base,\n        });\n        this.streamFull.push(file);\n        this.streamDts.push(file);\n    }\n\n    private applySourceMap(sourceMapContent: string, original: input.File, output: VinylFile) {\n        if (sourceMapContent === undefined) {\n            return undefined;\n        }\n\n        const map = JSON.parse(sourceMapContent);\n        const directory = path.dirname(output.path);\n\n        // gulp-sourcemaps docs:\n        // paths in the generated source map (`file` and `sources`) are relative to `file.base` (e.g. use `file.relative`).\n        map.file = utils.forwardSlashes(output.relative);\n        map.sources = map.sources.map(relativeToOutput);\n\n        delete map.sourceRoot;\n\n        const generator = sourceMap.SourceMapGenerator.fromSourceMap(new sourceMap.SourceMapConsumer(map));\n\n        const sourceMapOrigins = this.project.singleOutput\n            ? this.project.input.getFileNames(true).map(fName => this.project.input.getFile(fName))\n            : [original];\n\n        for (const sourceFile of sourceMapOrigins) {\n            if (!sourceFile || !sourceFile.gulp || !sourceFile.gulp.sourceMap) {\n                continue;\n            }\n\n            const inputOriginalMap = sourceFile.gulp.sourceMap;\n            const inputMap: sourceMap.RawSourceMap = typeof inputOriginalMap === \"object\" ? inputOriginalMap : JSON.parse(inputOriginalMap);\n\n            // We should only apply the input mappings if the input mapping isn't empty,\n            // since `generator.applySourceMap` has a really bad performance on big inputs.\n            if (inputMap.mappings !== \"\") {\n                const consumer = new sourceMap.SourceMapConsumer(inputMap);\n                generator.applySourceMap(consumer);\n            }\n\n            if (!inputMap.sources || !inputMap.sourcesContent) {\n                continue;\n            }\n            for (let i = 0; i < inputMap.sources.length; i++) {\n                const absolute = path.resolve(sourceFile.gulp.base, inputMap.sources[i]);\n                const relative = path.relative(output.base, absolute);\n                generator.setSourceContent(utils.forwardSlashes(relative), inputMap.sourcesContent[i]);\n            }\n        }\n        return generator.toString();\n\n        function relativeToOutput(fileName: string) {\n            const absolute = path.resolve(directory, fileName);\n            return utils.forwardSlashes(path.relative(output.base, absolute));\n        }\n    }\n\n    finish(result: reporter.CompilationResult) {\n        this.result = result;\n        if (this.project.reporter.finish) {\n            this.project.reporter.finish(result);\n        }\n\n        this.streamFull.emit(\"finish\");\n        this.streamFull.push(null);\n        this.streamJs.push(null);\n        this.streamDts.push(null);\n    }\n\n    private getError(info: ts.Diagnostic): reporter.TypeScriptError {\n        const fileName = info.file && info.file.fileName;\n        const file = fileName && this.project.input.getFile(fileName);\n\n        return utils.getError(info, this.project.typescript, file);\n    }\n\n    diagnostic(info: ts.Diagnostic) {\n        this.error(this.getError(info));\n    }\n\n    error(error: reporter.TypeScriptError) {\n        if (!error) {\n            return;\n        }\n\n        // call reporter callback\n        if (this.project.reporter.error) {\n            this.project.reporter.error(<reporter.TypeScriptError> error, this.project.typescript);\n        }\n        // & emit the error on the stream.\n        this.streamFull.emit(\"error\", error);\n    }\n}\n"]}