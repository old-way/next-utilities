{"version":3,"sources":["compiler.ts"],"names":[],"mappings":"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","file":"compiler.js","sourcesContent":["import * as path from \"path\";\nimport { RawSourceMap } from \"source-map\";\nimport * as ts from \"typescript\";\nimport { Host } from \"./host\";\nimport { File, FileChangeState } from \"./input\";\nimport { ProjectInfo } from \"./project\";\nimport { CompilationResult, emptyCompilationResult } from \"./reporter\";\nimport * as utils from \"./utils\";\n\nexport interface ICompiler {\n    prepare(project: ProjectInfo): void;\n\n    inputFile(file: File): void;\n\n    inputDone(): void;\n}\n\ninterface OutputFile {\n    file: File | undefined;\n\n    jsFileName?: string;\n\n    dtsFileName?: string;\n\n    jsContent?: string;\n\n    jsMapContent?: string;\n\n    dtsContent?: string;\n}\n\n/**\n * Compiles a whole project, with full type checking\n */\nexport class ProjectCompiler implements ICompiler {\n    host: Host;\n\n    project: ProjectInfo;\n\n    program: ts.Program;\n\n    private hasSourceMap: boolean;\n\n    prepare(project: ProjectInfo) {\n        this.project = project;\n        this.hasSourceMap = false;\n    }\n\n    inputFile(file: File) {\n        if (file.gulp.sourceMap) {\n            this.hasSourceMap = true;\n        }\n    }\n\n    inputDone() {\n        if (!this.project.input.firstSourceFile) {\n            this.project.output.finish(emptyCompilationResult(this.project.options.noEmit));\n            return;\n        }\n\n        const rootFilenames: Array<string> = this.project.input.getFileNames(true);\n        if (!this.project.singleOutput) {\n            if (this.project.options.rootDir === undefined) {\n                this.project.options.rootDir = utils.getCommonBasePathOfArray(\n                    rootFilenames.filter(fileName => fileName.substr(-5) !== \".d.ts\")\n                        .map(fileName => this.project.input.getFile(fileName).gulp.base),\n                );\n            }\n        }\n\n        this.project.options.sourceMap = this.hasSourceMap;\n\n        const currentDirectory = utils.getCommonBasePathOfArray(\n            rootFilenames.map(fileName => this.project.input.getFile(fileName).gulp.cwd),\n        );\n\n        this.host = new Host(\n            this.project.typescript,\n            currentDirectory,\n            this.project.input,\n            this.project.options,\n        );\n\n        this.program = this.project.typescript.createProgram(rootFilenames, this.project.options, this.host, this.program);\n\n        const result = emptyCompilationResult(this.project.options.noEmit);\n        result.optionsErrors = this.reportDiagnostics(this.program.getOptionsDiagnostics());\n        result.syntaxErrors = this.reportDiagnostics(this.program.getSyntacticDiagnostics());\n        result.globalErrors = this.reportDiagnostics(this.program.getGlobalDiagnostics());\n        result.semanticErrors = this.reportDiagnostics(this.program.getSemanticDiagnostics());\n        if (this.project.options.declaration) {\n            result.declarationErrors = this.program.getDeclarationDiagnostics().length;\n        }\n\n        if (this.project.singleOutput) {\n            const output: OutputFile = {\n                file: undefined,\n            };\n\n            this.emit(result, (fileName, content) => {\n                this.attachContentToFile(output, fileName, content);\n            });\n\n            this.emitFile(output, currentDirectory);\n        } else {\n            const output: utils.Map<OutputFile> = {};\n\n            const input = this.host.input.getFileNames(true);\n\n            for (let i = 0; i < input.length; i++) {\n                const fileName = utils.normalizePath(input[i]);\n                const file = this.project.input.getFile(fileName);\n\n                output[fileName] = { file };\n            }\n\n            this.emit(result, (fileName, content, writeByteOrderMark, onError, sourceFiles) => {\n                if (sourceFiles.length !== 1) {\n                    throw new Error(\"Failure: sourceFiles in WriteFileCallback should have length 1, got \" + sourceFiles.length);\n                }\n\n                const fileNameOriginal = utils.normalizePath(sourceFiles[0].fileName);\n                const file = output[fileNameOriginal];\n                if (!file) {\n                    return;\n                }\n\n                this.attachContentToFile(file, fileName, content);\n            });\n\n            for (let i = 0; i < input.length; i++) {\n                const fileName = utils.normalizePath(input[i]);\n                this.emitFile(output[fileName], currentDirectory);\n            }\n        }\n\n        this.project.output.finish(result);\n    }\n\n    private attachContentToFile(file: OutputFile, fileName: string, content: string) {\n        const [, extension] = utils.splitExtension(fileName, [\"d.ts\"]);\n        switch (extension) {\n            case \"js\":\n            case \"jsx\":\n                file.jsFileName = fileName;\n                file.jsContent = content;\n                break;\n            case \"d.ts\":\n                file.dtsFileName = fileName;\n                file.dtsContent = content;\n                break;\n            case \"map\":\n                file.jsMapContent = content;\n                break;\n        }\n    }\n\n    private emit(result: CompilationResult, callback: ts.WriteFileCallback) {\n        const emitOutput = this.program.emit(undefined, callback);\n\n        result.emitErrors += emitOutput.diagnostics.length;\n        this.reportDiagnostics(emitOutput.diagnostics);\n\n        result.emitSkipped = emitOutput.emitSkipped;\n    }\n\n    private emitFile(\n        { file, jsFileName, dtsFileName, jsContent, dtsContent, jsMapContent }: OutputFile,\n        currentDirectory: string,\n    ) {\n        if (!jsFileName) {\n            return;\n        }\n\n        let base: string;\n        let baseDeclarations: string;\n        if (file) {\n            base = file.gulp.base;\n            if (this.project.options.outDir) {\n                const baseRelative = path.relative(this.project.options.rootDir, base);\n                base = path.join(this.project.options.outDir, baseRelative);\n            }\n            baseDeclarations = base;\n            if (this.project.options.declarationDir) {\n                const baseRelative = path.relative(this.project.options.rootDir, file.gulp.base);\n                baseDeclarations = path.join(this.project.options.declarationDir, baseRelative);\n            }\n        } else if (this.project.options.outFile) {\n            base = this.project.directory;\n            baseDeclarations = base;\n        } else {\n            base = this.project.directory;\n            baseDeclarations = base;\n            jsFileName = path.resolve(base, jsFileName);\n            if (dtsFileName !== undefined) {\n                dtsFileName = path.resolve(base, dtsFileName);\n            }\n        }\n\n        if (jsContent !== undefined) {\n            if (jsMapContent !== undefined) {\n                jsContent = this.removeSourceMapComment(jsContent);\n            }\n            this.project.output.writeJs(base, jsFileName, jsContent, jsMapContent, file ? file.gulp.cwd : currentDirectory, file);\n        }\n        if (dtsContent !== undefined) {\n            this.project.output.writeDts(baseDeclarations, dtsFileName, dtsContent, file ? file.gulp.cwd : currentDirectory);\n        }\n    }\n\n    private reportDiagnostics(diagnostics: ReadonlyArray<ts.Diagnostic>) {\n        for (const error of diagnostics) {\n            this.project.output.diagnostic(error);\n        }\n        return diagnostics.length;\n    }\n\n    private removeSourceMapComment(content: string): string {\n        // By default the TypeScript automaticly inserts a source map comment.\n        // This should be removed because gulp-sourcemaps takes care of that.\n        // The comment is always on the last line, so it's easy to remove it\n        // (But the last line also ends with a \\n, so we need to look for the \\n before the other)\n        const index = content.lastIndexOf(\"\\n\", content.length - 2);\n        return content.substring(0, index) + \"\\n\";\n    }\n}\n\ninterface FileResult {\n    fileName: string;\n\n    diagnostics: Array<ts.Diagnostic>;\n\n    content: string;\n\n    sourceMap: string;\n}\n\nexport class FileCompiler implements ICompiler {\n    host: Host;\n\n    project: ProjectInfo;\n\n    private output: utils.Map<FileResult> = {};\n\n    private previousOutput: utils.Map<FileResult> = {};\n\n    private compilationResult: CompilationResult = undefined;\n\n    prepare(project: ProjectInfo) {\n        this.project = project;\n        this.project.input.noParse = true;\n        this.compilationResult = emptyCompilationResult(this.project.options.noEmit);\n    }\n\n    private write(file: File, fileName: string, diagnostics: Array<ts.Diagnostic>, content: string, sourceMap: string) {\n        this.output[file.fileNameNormalized] = { fileName, diagnostics, content, sourceMap };\n\n        for (const error of diagnostics) {\n            this.project.output.diagnostic(error);\n        }\n        this.compilationResult.transpileErrors += diagnostics.length;\n\n        this.project.output.writeJs(file.gulp.base, fileName, content, sourceMap, file.gulp.cwd, file);\n    }\n\n    inputFile(file: File) {\n        if (file.fileNameNormalized.substr(file.fileNameNormalized.length - 5) === \".d.ts\") {\n            return; // Don't compile definition files\n        }\n\n        if (this.project.input.getFileChange(file.fileNameOriginal).state === FileChangeState.Equal) {\n            // Not changed, re-use old file.\n\n            const old = this.previousOutput[file.fileNameNormalized];\n            this.write(file, old.fileName, old.diagnostics, old.content, old.sourceMap);\n\n            return;\n        }\n\n        const diagnostics: Array<ts.Diagnostic> = [];\n        const outputString = this.project.typescript.transpile(\n            file.content,\n            this.project.options,\n            file.fileNameOriginal,\n            diagnostics,\n        );\n        const index = outputString.lastIndexOf(\"\\n\");\n        let mapString = outputString.substring(index + 1);\n        if (mapString.substring(0, 1) === \"\\r\") {\n            mapString = mapString.substring(1);\n        }\n\n        const start = \"//# sourceMappingURL=data:application/json;base64,\";\n        if (mapString.substring(0, start.length) !== start) {\n            console.log(\"Couldn't read the sourceMap generated by TypeScript. This is likely an issue with gulp-typescript.\");\n            return;\n        }\n\n        mapString = mapString.substring(start.length);\n\n        const map: RawSourceMap = JSON.parse(new Buffer(mapString, \"base64\").toString());\n        // TODO: Set paths correctly\n        // map.sourceRoot = path.resolve(file.gulp.cwd, file.gulp.base);\n        // map.sources[0] = path.relative(map.sourceRoot, file.gulp.path);\n\n        const [fileNameExtensionless] = utils.splitExtension(file.fileNameOriginal);\n        const [, extension] = utils.splitExtension(map.file); // js or jsx\n\n        this.write(file, fileNameExtensionless + \".\" + extension, diagnostics, outputString.substring(0, index), JSON.stringify(map));\n    }\n\n    inputDone() {\n        this.project.output.finish(this.compilationResult);\n\n        this.previousOutput = this.output;\n        this.output = {};\n    }\n}\n"]}