{"version":3,"sources":["project.ts"],"names":[],"mappings":"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","file":"project.js","sourcesContent":["import * as path from \"path\";\nimport * as PluginError from \"plugin-error\";\nimport * as stream from \"stream\";\nimport * as ts from \"typescript\";\nimport * as VinylFile from \"vinyl\";\nimport * as vfs from \"vinyl-fs\";\nimport { FileCompiler, ICompiler, ProjectCompiler } from \"./compiler\";\nimport { FileCache } from \"./input\";\nimport { Output } from \"./output\";\nimport { defaultReporter, Reporter } from \"./reporter\";\nimport { TsConfig } from \"./types\";\nimport * as utils from \"./utils\";\n\ninterface PartialProject {\n    (reporter?: Reporter): ICompileStream;\n\n    src?(this: Project): NodeJS.ReadWriteStream;\n\n    typescript?: typeof ts;\n\n    projectDirectory?: string;\n\n    configFileName?: string;\n\n    rawConfig?: any;\n\n    config?: TsConfig;\n\n    options?: ts.CompilerOptions;\n}\n\nexport interface Project {\n    (reporter?: Reporter): ICompileStream;\n\n    src(this: Project): NodeJS.ReadWriteStream;\n\n    readonly typescript?: typeof ts;\n\n    readonly projectDirectory: string;\n\n    readonly configFileName: string;\n\n    readonly rawConfig: any;\n\n    readonly config: TsConfig;\n\n    readonly options: ts.CompilerOptions;\n}\n\nexport interface ProjectInfo {\n    input: FileCache;\n\n    output: Output;\n\n    compiler: ICompiler;\n\n    singleOutput: boolean;\n\n    options: ts.CompilerOptions;\n\n    typescript: typeof ts;\n\n    directory: string;\n\n    reporter: Reporter;\n}\n\nexport function setupProject(\n    projectDirectory: string,\n    configFileName: string,\n    rawConfig: any,\n    config: TsConfig,\n    options: ts.CompilerOptions,\n    typescript: typeof ts,\n) {\n    const input = new FileCache(typescript, options);\n    const compiler: ICompiler = options.isolatedModules ? new FileCompiler() : new ProjectCompiler();\n    let running = false;\n\n    if (options.isolatedModules) {\n        options.newLine = typescript.NewLineKind.LineFeed;\n        options.sourceMap = false;\n        options.declaration = false;\n        options.inlineSourceMap = true;\n    }\n\n    const project: PartialProject = (reporter) => {\n        if (running) {\n            throw new Error(\"gulp-typescript: A project cannot be used in two compilations at the same time. Create multiple projects with createProject instead.\");\n        }\n        running = true;\n\n        input.reset();\n        compiler.prepare(projectInfo);\n\n        const stream = new CompileStream(projectInfo);\n        projectInfo.output = new Output(projectInfo, stream, stream.js, stream.dts);\n        projectInfo.reporter = reporter || defaultReporter();\n\n        stream.on(\"finish\", () => {\n            running = false;\n        });\n\n        return stream;\n    };\n\n    const singleOutput = options.out !== undefined || options.outFile !== undefined;\n\n    project.src = src;\n    project.typescript = typescript;\n    project.projectDirectory = projectDirectory;\n    project.configFileName = configFileName;\n    project.rawConfig = rawConfig;\n    project.config = config;\n    project.options = options;\n\n    const projectInfo: ProjectInfo = {\n        input,\n        singleOutput,\n        compiler,\n        options,\n        typescript,\n        directory: projectDirectory,\n        // Set when `project` is called\n        output: undefined,\n        reporter: undefined,\n    };\n\n    return project as Project;\n}\n\nfunction src(this: Project) {\n    if (arguments.length >= 1) {\n        utils.message(\"tsProject.src() takes no arguments\", \"Use gulp.src(..) if you need to specify a glob\");\n    }\n\n    let base: string;\n    if (this.options.rootDir) {\n        base = path.resolve(this.projectDirectory, this.options.rootDir);\n    }\n\n    const { extends: _extends, ...config } = this.rawConfig;\n\n    const { fileNames, errors } = this.typescript.parseJsonConfigFileContent(\n        config,\n        this.typescript.sys,\n        path.resolve(this.projectDirectory),\n        undefined,\n        path.basename(this.configFileName));\n\n    for (const error of errors) {\n        console.log(error.messageText);\n    }\n\n    if (base === undefined) {\n        base = utils.getCommonBasePathOfArray(\n            fileNames.filter(file => file.substr(-5) !== \".d.ts\")\n                .map(file => path.dirname(file)));\n    }\n\n    const vinylOptions = { base, allowEmpty: true };\n    return vfs.src(fileNames, vinylOptions);\n}\n\nexport interface ICompileStream extends NodeJS.ReadWriteStream {\n    js: stream.Readable;\n\n    dts: stream.Readable;\n}\n\nclass CompileStream extends stream.Duplex implements ICompileStream {\n    constructor(project: ProjectInfo) {\n        super({ objectMode: true });\n\n        this.project = project;\n\n        // Prevent \"Unhandled stream error in pipe\" when a compilation error occurs.\n        this.on(\"error\", () => {\n        });\n    }\n\n    private project: ProjectInfo;\n\n    _write(file: any, encoding: string, cb: (err?: any) => void): void;\n    _write(file: VinylFile, encoding: string, cb = (err?: any) => {\n    }) {\n        if (!file) {\n            return cb();\n        }\n\n        if (file.isNull()) {\n            cb();\n            return;\n        }\n        if (file.isStream()) {\n            return cb(new PluginError(\"gulp-typescript\", \"Streaming not supported\"));\n        }\n\n        const inputFile = this.project.input.addGulp(file);\n\n        this.project.compiler.inputFile(inputFile);\n\n        cb();\n    }\n\n    _read() {\n\n    }\n\n    end(chunk?: any, encoding?: any, callback?: any) {\n        if (typeof chunk === \"function\") {\n            this._write(null, null, chunk);\n        } else if (typeof encoding === \"function\") {\n            this._write(chunk, null, encoding);\n        } else {\n            this._write(chunk, encoding, callback);\n        }\n        this.project.compiler.inputDone();\n    }\n\n    js: stream.Readable = new CompileOutputStream();\n\n    dts: stream.Readable = new CompileOutputStream();\n}\n\nclass CompileOutputStream extends stream.Readable {\n    constructor() {\n        super({ objectMode: true });\n    }\n\n    _read() {\n\n    }\n}\n"]}