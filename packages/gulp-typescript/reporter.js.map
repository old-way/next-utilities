{"version":3,"sources":["reporter.ts"],"names":[],"mappings":"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","file":"reporter.js","sourcesContent":["import * as colors from \"ansi-colors\";\nimport * as ts from \"typescript\";\nimport * as VinylFile from \"vinyl\";\n\nexport interface TypeScriptError extends Error {\n    fullFilename?: string;\n\n    relativeFilename?: string;\n\n    file?: VinylFile;\n\n    tsFile?: ts.SourceFile;\n\n    diagnostic: ts.Diagnostic;\n\n    startPosition?: {\n        position: number;\n        line: number;\n        character: number;\n    };\n\n    endPosition?: {\n        position: number;\n        line: number;\n        character: number;\n    };\n}\n\nexport interface CompilationResult {\n    /**\n     * Only used when using isolatedModules.\n     */\n    transpileErrors: number;\n\n    optionsErrors: number;\n\n    syntaxErrors: number;\n\n    globalErrors: number;\n\n    semanticErrors: number;\n\n    declarationErrors: number;\n\n    emitErrors: number;\n\n    noEmit: boolean;\n\n    emitSkipped: boolean;\n}\n\nexport function emptyCompilationResult(noEmit: boolean): CompilationResult {\n    return {\n        transpileErrors: 0,\n        optionsErrors: 0,\n        syntaxErrors: 0,\n        globalErrors: 0,\n        semanticErrors: 0,\n        declarationErrors: 0,\n        emitErrors: 0,\n        noEmit,\n        emitSkipped: false,\n    };\n}\n\nexport interface Reporter {\n    error?: (error: TypeScriptError, typescript: typeof ts) => void;\n\n    finish?: (results: CompilationResult) => void;\n}\n\nfunction defaultFinishHandler(results: CompilationResult) {\n    let hasError = false;\n    const showErrorCount = (count: number, type: string) => {\n        if (count === 0) {\n            return;\n        }\n\n        console.log(\"TypeScript:\", colors.magenta(count.toString()), (type !== \"\" ? type + \" \" : \"\") + (count === 1 ? \"error\" : \"errors\"));\n        hasError = true;\n    };\n\n    showErrorCount(results.transpileErrors, \"\");\n    showErrorCount(results.optionsErrors, \"options\");\n    showErrorCount(results.syntaxErrors, \"syntax\");\n    showErrorCount(results.globalErrors, \"global\");\n    showErrorCount(results.semanticErrors, \"semantic\");\n    showErrorCount(results.declarationErrors, \"declaration\");\n    showErrorCount(results.emitErrors, \"emit\");\n\n    if (!results.noEmit) {\n        if (results.emitSkipped) {\n            console.log(\"TypeScript: emit\", colors.red(\"failed\"));\n        } else if (hasError) {\n            console.log(\"TypeScript: emit\", colors.cyan(\"succeeded\"), \"(with errors)\");\n        }\n    }\n}\n\nexport function nullReporter(): Reporter {\n    return {};\n}\n\nexport function defaultReporter(): Reporter {\n    return {\n        error: (error: TypeScriptError) => {\n            console.log(error.message);\n        },\n        finish: defaultFinishHandler,\n    };\n}\n\nexport function longReporter(): Reporter {\n    const typescript: typeof ts = require(\"typescript\");\n    return {\n        error: (error: TypeScriptError) => {\n            if (error.tsFile) {\n                console.log(\"[\" + colors.gray(\"gulp-typescript\") + \"] \" + colors.red(error.fullFilename\n                    + \"(\" + error.startPosition.line + \",\" + error.startPosition.character + \"): \")\n                    + \"error TS\" + error.diagnostic.code + \" \" + typescript.flattenDiagnosticMessageText(error.diagnostic.messageText, \"\\n\"));\n            } else {\n                console.log(error.message);\n            }\n        },\n        finish: defaultFinishHandler,\n    };\n}\n\nexport function fullReporter(fullFilename = false): Reporter {\n    return {\n        error: (error: TypeScriptError, typescript: typeof ts) => {\n            console.log(\"[\" + colors.gray(\"gulp-typescript\") + \"] \"\n                + colors.bgred(error.diagnostic.code + \"\")\n                + \" \" + colors.red(typescript.flattenDiagnosticMessageText(error.diagnostic.messageText, \"\\n\")),\n            );\n\n            if (error.tsFile) {\n                console.log(\"> \" + colors.gray(\"file: \") + (fullFilename ? error.fullFilename : error.relativeFilename) + colors.gray(\":\"));\n                const lines = error.tsFile.text.split(/(?:\\r\\n|\\r|\\n)/);\n\n                const logLine = (lineIndex: number, errorStart: number, errorEnd?: number) => {\n                    const line = lines[lineIndex];\n                    if (errorEnd === undefined) {\n                        errorEnd = line.length;\n                    }\n                    console.log(\"> \" + colors.gray(\"[\" + lineIndex + \"] \")\n                        + line.substring(0, errorStart)\n                        + colors.red(line.substring(errorStart, errorEnd))\n                        + line.substring(errorEnd),\n                    );\n                };\n\n                for (let i = error.startPosition.line; i <= error.endPosition.line; i++) {\n                    logLine(i,\n                        i === error.startPosition.line ? error.startPosition.character - 1 : 0,\n                        i === error.endPosition.line ? error.endPosition.character - 1 : undefined,\n                    );\n                }\n            }\n        },\n        finish: defaultFinishHandler,\n    };\n}\n"]}