{"version":3,"sources":["input.ts"],"names":[],"mappings":"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","file":"input.js","sourcesContent":["import * as path from \"path\";\nimport * as ts from \"typescript\";\nimport * as VinylFile from \"vinyl\";\nimport * as utils from \"./utils\";\n\nexport enum FileChangeState {\n    New,\n    Equal,\n    Modified,\n    Deleted,\n    NotFound\n}\n\nexport enum FileKind {\n    Source,\n    Config\n}\n\nexport interface FileChange {\n    previous: File;\n\n    current: File;\n\n    state: FileChangeState;\n}\n\nexport interface File {\n    gulp?: VinylFile;\n\n    fileNameNormalized: string;\n\n    fileNameOriginal: string;\n\n    content: string;\n\n    kind: FileKind;\n\n    ts?: ts.SourceFile;\n}\n\nexport namespace File {\n    export function fromContent(fileName: string, content: string): File {\n        let kind = FileKind.Source;\n        if (path.extname(fileName).toLowerCase() === \"json\") {\n            kind = FileKind.Config;\n        }\n\n        return {\n            fileNameNormalized: utils.normalizePath(fileName),\n            fileNameOriginal: fileName,\n            content,\n            kind,\n        };\n    }\n\n    export function fromGulp(file: VinylFile): File {\n        const str = (<Buffer> file.contents).toString(\"utf8\");\n        const data = fromContent(file.path, str);\n        data.gulp = file;\n\n        return data;\n    }\n\n    export function equal(a: File, b: File): boolean {\n        if (a === undefined || b === undefined) {\n            return a === b;\n        } // They could be both undefined.\n        return (a.fileNameOriginal === b.fileNameOriginal)\n            && (a.content === b.content);\n    }\n\n    export function getChangeState(previous: File, current: File): FileChangeState {\n        if (previous === undefined) {\n            return current === undefined ? FileChangeState.NotFound : FileChangeState.New;\n        }\n        if (current === undefined) {\n            return FileChangeState.Deleted;\n        }\n        if (equal(previous, current)) {\n            return FileChangeState.Equal;\n        }\n        return FileChangeState.Modified;\n    }\n}\n\nexport class FileDictionary {\n    files: utils.Map<File> = {};\n\n    firstSourceFile: File = undefined;\n\n    typescript: typeof ts;\n\n    constructor(typescript: typeof ts) {\n        this.typescript = typescript;\n    }\n\n    addGulp(gFile: VinylFile) {\n        return this.addFile(File.fromGulp(gFile));\n    }\n\n    addContent(fileName: string, content: string) {\n        return this.addFile(File.fromContent(fileName, content));\n    }\n\n    private addFile(file: File) {\n        if (file.kind === FileKind.Source) {\n            this.initTypeScriptSourceFile(file);\n            if (!this.firstSourceFile) {\n                this.firstSourceFile = file;\n            }\n        }\n        this.files[file.fileNameNormalized] = file;\n        return file;\n    }\n\n    getFile(name: string) {\n        return this.files[utils.normalizePath(name)];\n    }\n\n    initTypeScriptSourceFile: (file: File) => void;\n\n    getFileNames(onlyGulp = false) {\n        const fileNames: Array<string> = [];\n        for (const fileName in this.files) {\n            if (!this.files.hasOwnProperty(fileName)) {\n                continue;\n            }\n            const file = this.files[fileName];\n            if (onlyGulp && !file.gulp) {\n                continue;\n            }\n            fileNames.push(file.fileNameOriginal);\n        }\n        return fileNames;\n    }\n\n    private getSourceFileNames(onlyGulp?: boolean) {\n        const fileNames = this.getFileNames(onlyGulp);\n        const sourceFileNames = fileNames\n            .filter(fileName => fileName.substr(fileName.length - 5).toLowerCase() !== \".d.ts\");\n\n        if (sourceFileNames.length === 0) {\n            // Only definition files, so we will calculate the common base path based on the\n            // paths of the definition files.\n            return fileNames;\n        }\n        return sourceFileNames;\n    }\n\n    get commonBasePath() {\n        const fileNames = this.getSourceFileNames(true);\n        return utils.getCommonBasePathOfArray(\n            fileNames.map(fileName => {\n                const file = this.files[utils.normalizePath(fileName)];\n                return path.resolve(process.cwd(), file.gulp.base);\n            }),\n        );\n    }\n\n    // This empty setter will prevent that TS emits 'readonly' modifier.\n    // 'readonly' is not supported in current stable release.\n    set commonBasePath(value) {\n    }\n\n    get commonSourceDirectory() {\n        const fileNames = this.getSourceFileNames();\n        return utils.getCommonBasePathOfArray(\n            fileNames.map(fileName => {\n                const file = this.files[utils.normalizePath(fileName)];\n                return path.dirname(file.fileNameNormalized);\n            }),\n        );\n    }\n\n    // This empty setter will prevent that TS emits 'readonly' modifier.\n    // 'readonly' is not supported in current stable release.\n    set commonSourceDirectory(value) {\n    }\n}\n\nexport class FileCache {\n    previous: FileDictionary = undefined;\n\n    current: FileDictionary;\n\n    options: ts.CompilerOptions;\n\n    noParse = false; // true when using a file based compiler.\n\n    typescript: typeof ts;\n\n    version = 0;\n\n    constructor(typescript: typeof ts, options: ts.CompilerOptions) {\n        this.typescript = typescript;\n        this.options = options;\n        this.createDictionary();\n    }\n\n    addGulp(gFile: VinylFile) {\n        return this.current.addGulp(gFile);\n    }\n\n    addContent(fileName: string, content: string) {\n        return this.current.addContent(fileName, content);\n    }\n\n    reset() {\n        this.version++;\n        this.previous = this.current;\n        this.createDictionary();\n    }\n\n    private createDictionary() {\n        this.current = new FileDictionary(this.typescript);\n        this.current.initTypeScriptSourceFile = (file) => this.initTypeScriptSourceFile(file);\n    }\n\n    private initTypeScriptSourceFile(file: File) {\n        if (this.noParse) {\n            return;\n        }\n        if (this.previous) {\n            const previous = this.previous.getFile(file.fileNameOriginal);\n            if (File.equal(previous, file)) {\n                file.ts = previous.ts; // Re-use previous source file.\n                return;\n            }\n        }\n        file.ts = this.typescript.createSourceFile(file.fileNameOriginal, file.content, this.options.target);\n    }\n\n    getFile(name: string) {\n        return this.current.getFile(name);\n    }\n\n    getFileChange(name: string): FileChange {\n        let previous: File;\n        if (this.previous) {\n            previous = this.previous.getFile(name);\n        }\n\n        const current = this.current.getFile(name);\n\n        return {\n            previous,\n            current,\n            state: File.getChangeState(previous, current),\n        };\n    }\n\n    getFileNames(onlyGulp = false) {\n        return this.current.getFileNames(onlyGulp);\n    }\n\n    get firstSourceFile() {\n        return this.current.firstSourceFile;\n    }\n\n    // This empty setter will prevent that TS emits 'readonly' modifier.\n    // 'readonly' is not supported in current stable release.\n    set firstSourceFile(value) {\n    }\n\n    get commonBasePath() {\n        return this.current.commonBasePath;\n    }\n\n    set commonBasePath(value) {\n    }\n\n    get commonSourceDirectory() {\n        return this.current.commonSourceDirectory;\n    }\n\n    set commonSourceDirectory(value) {\n    }\n\n    isChanged(onlyGulp = false) {\n        if (!this.previous) {\n            return true;\n        }\n\n        const files = this.getFileNames(onlyGulp);\n        const oldFiles = this.previous.getFileNames(onlyGulp);\n\n        if (files.length !== oldFiles.length) {\n            return true;\n        }\n\n        for (const fileName of files) {\n            if (oldFiles.indexOf(fileName) === -1) {\n                return true;\n            }\n        }\n\n        for (const fileName of files) {\n            const change = this.getFileChange(fileName);\n            if (change.state !== FileChangeState.Equal) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"]}