{"version":3,"sources":["host.ts"],"names":[],"mappings":";;AAEA,iCAAiC;AAEjC;IAgCI,YAAY,UAAqB,EAAE,gBAAwB,EAAE,KAAgB,EAAE,OAA2B;QAgB1G,wBAAmB,GAAG,GAAG,EAAE;YACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC,CAAA;QAgBD,cAAS,GAAG,CAAC,QAAgB,EAAE,IAAY,EAAE,kBAA2B,EAAE,OAAmC,EAAE,EAAE;QACjH,CAAC,CAAA;QAED,eAAU,GAAG,CAAC,QAAgB,EAAE,EAAE;YAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,UAAU,EAAE;gBACZ,OAAO,IAAI,CAAC;aACf;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,aAAQ,GAAG,CAAC,QAAgB,EAAE,EAAE;YAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,UAAU,EAAE;gBACZ,OAAO,UAAU,CAAC,OAAO,CAAC;aAC7B;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC,CAAC;QAEF,kBAAa,GAAG,CACZ,QAAgB,EAChB,eAAgC,EAChC,OAAmC,EACtB,EAAE;YAEf,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,UAAU,EAAE;gBACZ,OAAO,UAAU,CAAC,EAAE,CAAC;aACxB;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QAC3E,CAAC,CAAC;QAEF,aAAQ,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE1D,mBAAc,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAEtE,oBAAe,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAxEpE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAEvD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,UAAU;QACN,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,yBAAyB;QACrB,OAAO,KAAK,CAAC;IACjB,CAAC;IAMD,oBAAoB,CAAC,QAAgB;QACjC,OAAO,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,qBAAqB,CAAC,OAA2B;QAC7C,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IACxD,CAAC;IAED,qBAAqB;QACjB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;SAChD;IACL,CAAC;CA0CJ;AA1GD,oBA0GC","file":"host.js","sourcesContent":["import * as ts from \"typescript\";\nimport { FileCache } from \"./input\";\nimport * as utils from \"./utils\";\n\nexport class Host implements ts.CompilerHost {\n    // TODO: Cache lib.d.ts between compilations. Old code:\n    /* static libDefault: utils.Map<ts.SourceFile> = {};\n\tstatic getLibDefault(typescript: typeof ts, libFileName: string, originalFileName: string) {\n\t\tlet fileName: string;\n\t\tfor (const i in require.cache) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(require.cache, i) || require.cache[i] === undefined) continue;\n\n\t\t\tif (require.cache[i].exports === typescript) {\n\t\t\t\tfileName = i;\n\t\t\t}\n\t\t}\n\t\tif (fileName === undefined) {\n\t\t\treturn undefined; // Not found\n\t\t}\n\t\tfileName = path.join(path.dirname(fileName), libFileName);\n\t\tif (this.libDefault[fileName]) {\n\t\t\treturn this.libDefault[fileName]; // Already loaded\n\t\t}\n\n\t\tconst content = fs.readFileSync(fileName).toString('utf8');\n\t\treturn this.libDefault[fileName] = tsApi.createSourceFile(typescript, originalFileName, content, typescript.ScriptTarget.ES3); // Will also work for ES5 & 6\n\t} */\n\n    typescript: typeof ts;\n\n    fallback: ts.CompilerHost;\n\n    currentDirectory: string;\n\n    input: FileCache;\n\n    constructor(typescript: typeof ts, currentDirectory: string, input: FileCache, options: ts.CompilerOptions) {\n        this.typescript = typescript;\n        this.fallback = typescript.createCompilerHost(options);\n\n        this.currentDirectory = currentDirectory;\n        this.input = input;\n    }\n\n    getNewLine() {\n        return \"\\n\";\n    }\n\n    useCaseSensitiveFileNames() {\n        return false;\n    }\n\n    getCurrentDirectory = () => {\n        return this.currentDirectory;\n    }\n\n    getCanonicalFileName(filename: string) {\n        return utils.normalizePath(filename);\n    }\n\n    getDefaultLibFileName(options: ts.CompilerOptions) {\n        return this.fallback.getDefaultLibFileName(options);\n    }\n\n    getDefaultLibLocation() {\n        if (this.fallback) {\n            return this.fallback.getDefaultLibLocation();\n        }\n    }\n\n    writeFile = (fileName: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void) => {\n    }\n\n    fileExists = (fileName: string) => {\n        const sourceFile = this.input.getFile(fileName);\n        if (sourceFile) {\n            return true;\n        }\n\n        return this.fallback.fileExists(fileName);\n    };\n\n    readFile = (fileName: string) => {\n        const sourceFile = this.input.getFile(fileName);\n        if (sourceFile) {\n            return sourceFile.content;\n        }\n\n        return this.fallback.readFile(fileName);\n    };\n\n    getSourceFile = (\n        fileName: string,\n        languageVersion: ts.ScriptTarget,\n        onError?: (message: string) => void,\n    ): ts.SourceFile => {\n        // TODO: Cache lib.d.ts files between compilations\n        const sourceFile = this.input.getFile(fileName);\n        if (sourceFile) {\n            return sourceFile.ts;\n        }\n\n        return this.fallback.getSourceFile(fileName, languageVersion, onError);\n    };\n\n    realpath = (path: string) => this.fallback.realpath(path);\n\n    getDirectories = (path: string) => this.fallback.getDirectories(path);\n\n    directoryExists = (path: string) => this.fallback.directoryExists(path);\n}\n"]}