{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import * as path from \"path\";\nimport * as ts from \"typescript\";\nimport * as _project from \"./project\";\nimport * as _reporter from \"./reporter\";\nimport { TsConfig } from \"./types\";\nimport * as utils from \"./utils\";\n\nfunction compile(proj: _project.Project, theReporter?: _reporter.Reporter): compile.CompileStream;\nfunction compile(settings: compile.Settings, theReporter?: _reporter.Reporter): compile.CompileStream;\nfunction compile(): compile.CompileStream;\nfunction compile(param?: any, theReporter?: _reporter.Reporter): compile.CompileStream {\n    if (arguments.length >= 3) {\n        utils.deprecate(\"Reporter are now passed as the second argument\",\n            \"remove the second argument\",\n            \"Filters have been removed as of gulp-typescript 3.0.\\nThe reporter is now passed as the second argument instead of the third argument.\");\n    }\n\n    let proj: _project.Project;\n    if (typeof param === \"function\") {\n        proj = param;\n        if (arguments.length >= 2) {\n            utils.deprecate(\"ts(tsProject, ...) has been deprecated\",\n                \"use .pipe(tsProject(reporter)) instead\",\n                \"As of gulp-typescript 3.0, .pipe(ts(tsProject, ...)) should be written as .pipe(tsProject(reporter)).\");\n        } else {\n            utils.deprecate(\"ts(tsProject) has been deprecated\",\n                \"use .pipe(tsProject()) instead\",\n                \"As of gulp-typescript 3.0, .pipe(ts(tsProject)) should be written as .pipe(tsProject()).\");\n        }\n    } else {\n        proj = compile.createProject(param || {});\n    }\n    return proj(theReporter);\n}\n\nfunction getTypeScript(typescript: typeof ts) {\n    if (typescript) {\n        return typescript;\n    }\n    try {\n        return require(\"typescript\");\n    } catch (e) {\n        utils.deprecate(\"TypeScript not installed\",\n            \"install with `npm install typescript --save-dev`\",\n            \"As of gulp-typescript 3.0, TypeScript isn't bundled with gulp-typescript any more.\\nInstall the latest stable version with `npm install typescript --save-dev`\\nor a nightly with `npm install typescript@next --save-dev`\");\n        throw new Error(\"TypeScript not installed\");\n    }\n}\n\nfunction checkAndNormalizeSettings(settings: compile.Settings): compile.Settings {\n    const { declarationFiles, noExternalResolve, sortOutput, typescript, ...standardSettings } = settings;\n\n    if (settings.sourceRoot !== undefined) {\n        console.warn(\"gulp-typescript: sourceRoot isn't supported any more. Use sourceRoot option of gulp-sourcemaps instead.\");\n    }\n\n    if (noExternalResolve !== undefined) {\n        utils.deprecate(\"noExternalResolve is deprecated\",\n            \"use noResolve instead\",\n            \"The non-standard option noExternalResolve has been removed as of gulp-typescript 3.0.\\nUse noResolve instead.\");\n    }\n    if (sortOutput !== undefined) {\n        utils.deprecate(\"sortOutput is deprecated\",\n            \"your project might work without it\",\n            \"The non-standard option sortOutput has been removed as of gulp-typescript 3.0.\\nYour project will probably compile without this option.\\nOtherwise, if you're using gulp-concat, you should remove gulp-concat and use the outFile option instead.\");\n    }\n\n    if (declarationFiles) {\n        standardSettings.declaration = settings.declarationFiles;\n    }\n\n    return standardSettings;\n}\n\nfunction normalizeCompilerOptions(options: ts.CompilerOptions): void {\n    options.sourceMap = true;\n    (options as any).suppressOutputPathCheck = true;\n    options.inlineSourceMap = false;\n    options.sourceRoot = undefined;\n    options.inlineSources = false;\n}\n\nfunction reportErrors(errors: Array<ts.Diagnostic>, typescript: typeof ts, ignore: Array<number> = []): void {\n    const reporter = _reporter.defaultReporter();\n    for (const error of errors) {\n        if (ignore.indexOf(error.code) !== -1) {\n            continue;\n        }\n\n        reporter.error(utils.getError(error, typescript), typescript);\n    }\n}\n\nnamespace compile {\n    export interface Settings {\n        out?: string;\n\n        outFile?: string;\n\n        outDir?: string;\n\n        allowNonTsExtensions?: boolean;\n\n        charset?: string;\n\n        codepage?: number;\n\n        declaration?: boolean; // alias of declarationFiles\n        locale?: string;\n\n        mapRoot?: string;\n\n        noEmitOnError?: boolean;\n\n        noImplicitAny?: boolean;\n\n        noLib?: boolean;\n\n        noLibCheck?: boolean;\n\n        noResolve?: boolean;\n\n        preserveConstEnums?: boolean;\n\n        removeComments?: boolean;\n\n        suppressImplicitAnyIndexErrors?: boolean;\n\n        target?: string | ts.ScriptTarget;\n\n        module?: string | ts.ModuleKind;\n\n        moduleResolution?: string | number;\n\n        jsx?: string | number;\n\n        declarationFiles?: boolean;\n\n        noExternalResolve?: boolean;\n\n        sortOutput?: boolean;\n\n        typescript?: typeof ts;\n\n        isolatedModules?: boolean;\n\n        rootDir?: string;\n\n        rootDirs?: any;\n\n        lib?: Array<string>;\n\n        experimentalDecorators?: boolean;\n\n        [name: string]: any;\n\n        // Unsupported by gulp-typescript\n        sourceRoot?: string; // Use sourceRoot in gulp-sourcemaps instead\n    }\n\n    export type Project = _project.Project;\n    export type CompileStream = _project.CompileStream;\n    export import reporter = _reporter;\n\n    export function createProject(tsConfigFileName: string, settings?: Settings): Project;\n    export function createProject(settings?: Settings): Project;\n    export function createProject(fileNameOrSettings?: string | Settings, settings?: Settings): Project {\n        let tsConfigFileName: string;\n        let tsConfigContent: TsConfig;\n        let projectDirectory = process.cwd();\n        let typescript: typeof ts;\n        let compilerOptions: ts.CompilerOptions;\n        let fileName: string;\n\n        let rawConfig: any;\n\n        if (fileNameOrSettings !== undefined) {\n            if (typeof fileNameOrSettings === \"string\") {\n                fileName = fileNameOrSettings;\n                tsConfigFileName = path.resolve(process.cwd(), fileName);\n                projectDirectory = path.dirname(tsConfigFileName);\n                if (settings === undefined) {\n                    settings = {};\n                }\n            } else {\n                settings = fileNameOrSettings || {};\n            }\n\n            typescript = getTypeScript(settings.typescript);\n            settings = checkAndNormalizeSettings(settings);\n\n            const settingsResult = typescript.convertCompilerOptionsFromJson(settings, projectDirectory);\n\n            if (settingsResult.errors) {\n                reportErrors(settingsResult.errors, typescript);\n            }\n\n            compilerOptions = settingsResult.options;\n\n            if (fileName !== undefined) {\n                const tsConfig = typescript.readConfigFile(tsConfigFileName, typescript.sys.readFile);\n                if (tsConfig.error) {\n                    console.log(tsConfig.error.messageText);\n                }\n\n                const parsed: ts.ParsedCommandLine =\n                    typescript.parseJsonConfigFileContent(\n                        tsConfig.config || {},\n                        getTsconfigSystem(typescript),\n                        path.resolve(projectDirectory),\n                        compilerOptions,\n                        path.basename(tsConfigFileName));\n\n                rawConfig = parsed.raw;\n\n                tsConfigContent = parsed.raw;\n\n                if (parsed.errors) {\n                    reportErrors(parsed.errors, typescript, [18003]);\n                }\n\n                compilerOptions = parsed.options;\n            }\n        }\n\n        normalizeCompilerOptions(compilerOptions);\n        const project = _project.setupProject(projectDirectory, tsConfigFileName, rawConfig, tsConfigContent, compilerOptions, typescript);\n\n        return project;\n    }\n\n    export function filter(...args: Array<any>) {\n        utils.deprecate(\"ts.filter() is deprecated\",\n            \"soon you can use tsProject.resolve()\",\n            \"Filters have been removed as of gulp-typescript 3.0.\\nSoon tsProject.resolve() will be available as an alternative.\\nSee https://github.com/ivogabe/gulp-typescript/issues/190.\");\n    }\n}\n\nfunction getTsconfigSystem(typescript: typeof ts): ts.ParseConfigHost {\n    return {\n        useCaseSensitiveFileNames: typescript.sys.useCaseSensitiveFileNames,\n        readDirectory: () => [],\n        fileExists: typescript.sys.fileExists,\n        readFile: typescript.sys.readFile,\n    };\n}\n\nexport = compile;\n"]}