{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import * as path from \"path\";\nimport * as ts from \"typescript\";\nimport { File } from \"./input\";\nimport * as reporter from \"./reporter\";\nimport * as colors from \"ansi-colors\";\n\nexport interface Map<T> {\n    [key: string]: T;\n}\n\nexport function forwardSlashes(fileName: string) {\n    return fileName.replace(/\\\\/g, \"/\");\n}\n\nexport function normalizePath(pathString: string) {\n    return path.normalize(pathString).toLowerCase();\n}\n\n/**\n * Splits a filename into an extensionless filename and an extension.\n * 'bar/foo.js' is turned into ['bar/foo', 'js']\n * 'foo.d.ts' is parsed as ['foo', 'd.ts'] if you add 'd.ts' to knownExtensions.\n * @param knownExtensions An array with known extensions, that contain multiple parts, like 'd.ts'. 'a.b.c' should be listed before 'b.c'.\n */\nexport function splitExtension(fileName: string, knownExtensions?: Array<string>): [string, string] {\n    if (knownExtensions) {\n        for (const ext of knownExtensions) {\n            const index = fileName.length - ext.length - 1;\n            if (fileName.substr(index) === \".\" + ext) {\n                return [fileName.substr(0, index), ext];\n            }\n        }\n    }\n\n    const ext = path.extname(fileName).toLowerCase().substr(1);\n    const index = fileName.length - ext.length;\n    return [fileName.substr(0, index - 1), ext];\n}\n\n/**\n * Finds the common base path of two directories\n */\nexport function getCommonBasePath(a: string, b: string) {\n    const aSplit = a.split(/\\\\|\\//); // Split on '/' or '\\'.\n    const bSplit = b.split(/\\\\|\\//);\n    let commonLength = 0;\n    for (let i = 0; i < aSplit.length && i < bSplit.length; i++) {\n        if (aSplit[i] !== bSplit[i]) { break; }\n\n        commonLength += aSplit[i].length + 1;\n    }\n\n    return a.substr(0, commonLength);\n}\n\nexport function getCommonBasePathOfArray(paths: Array<string>) {\n    if (paths.length === 0) { return \"\"; }\n    return paths.reduce(getCommonBasePath);\n}\n\nexport function getError(info: ts.Diagnostic, typescript: typeof ts, file?: File) {\n    const err = <reporter.TypeScriptError> new Error();\n    err.name = \"TypeScript error\";\n    err.diagnostic = info;\n\n    const codeAndMessageText = typescript.DiagnosticCategory[info.category].toLowerCase() +\n        \" TS\" +\n        info.code +\n        \": \" +\n        typescript.flattenDiagnosticMessageText(info.messageText, \"\\n\");\n\n    if (!info.file) {\n        err.message = codeAndMessageText;\n        return err;\n    }\n\n    let fileName = info.file.fileName;\n\n    if (file) {\n        err.tsFile = file.ts;\n        err.fullFilename = file.fileNameOriginal;\n        if (file.gulp) {\n            fileName = path.relative(file.gulp.cwd, file.fileNameOriginal);\n            err.relativeFilename = fileName;\n            err.file = file.gulp;\n        } else {\n            fileName = file.fileNameOriginal;\n        }\n    } else {\n        err.fullFilename = info.file.fileName;\n    }\n\n    const startPos = typescript.getLineAndCharacterOfPosition(info.file, info.start);\n    const endPos = typescript.getLineAndCharacterOfPosition(info.file, info.start + info.length);\n\n    err.startPosition = {\n        position: info.start,\n        line: startPos.line,\n        character: startPos.character\n    };\n    err.endPosition = {\n        position: info.start + info.length - 1,\n        line: endPos.line,\n        character: endPos.character\n    };\n\n    err.message = colors.red(fileName + \"(\" + (startPos.line + 1) + \",\" + (startPos.character + 1) + \"): \").toString()\n        + codeAndMessageText;\n\n    return err;\n}\n\nexport function deprecate(title: string, alternative: string, description?: string) {\n    message(title, alternative, description);\n    console.log(\"  \" + colors.gray(\"More information: \" + colors.underline(\"http://dev.ivogabe.com/gulp-typescript-3/\")));\n}\nexport function message(title: string, alternative: string, description?: string) {\n    console.log(\n        colors.red(\"gulp-typescript\").toString() +\n        colors.gray(\": \") +\n        title +\n        colors.gray(\" - \") +\n        alternative);\n    if (description) { console.log(\"  \" + colors.gray(description.replace(/\\n/g, \"\\n  \"))); }\n}\n"]}